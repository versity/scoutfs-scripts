#!/bin/bash
#
# Copyright 2024 Versity Software
#
#shellcheck disable=SC1090
# ScoutFS Fencing Script
#
# /usr/libexec/scoutfs-fenced/run/fence-remote-host
#
# /etc/scoutfs/scoutfs-ipmi.conf - Configuration for executing ssh and ipmitool
#
# IPMI_USER - User (-U) argument for ipmitool
# IPMI_PASS - File (-f) argument for ipmitool
# IPMI_RETRIES - Retry (-R) argument for ipmitool
# IPMI_OPTS - Additional arguments for ipmitool
# STATUS_RETRIES - Number of retries to sense power off
# STATUS_WAIT - Seconds to wait between checking host power off
# SSH_USER - User to ssh to remote host as
# SSH_IDENTS - If non-root path to id_rsa and id_rsa.pub
#
# Example
# ------------------------------------------------------
# IPMI_USER="admin"
# IPMI_PASS="/etc/scoutfs/ipmi-pass"
# IPMI_OPTS=""
# STATUS_RETRIES="3"
# STATUS_WAIT="2"
# SSH_USER="user"
# SSH_IDENTS="-i ~user/.ssh/id_rsa -i ~user/.ssh/id_rsa.pub"
#
# /etc/scoutfs/scoutfs-ipmi-hosts.conf - Quorum/ScoutFS IP to BMC IP/powerman mapping
#
# 192.168.0.101 ipmitool 10.100.0.1
# 192.168.0.102 ipmitool 10.100.0.2
# 192.168.0.103 ipmitool 10.100.0.3
# 192.168.0.104 powerman 192.168.0.200:node04
# 192.168.0.105 powerman 192.168.0.200:node05

# v2.5
# March 21, 2024
#-------------------------------------------------------------------------------
# * Added fix to properly escape host names for regular expressions

# v2.4
# February 9, 2024
#-------------------------------------------------------------------------------
# * Added check to see if hosts and ports are alive

# v2.3
# January 29, 2024
#-------------------------------------------------------------------------------
# * Added curl timeout defaults to 3 seconds

# v2.2
# January 22, 2024
#-------------------------------------------------------------------------------
# * Added "-C|--config" option to specify alternate IPMI config file
# * Fixed test to ignore empty VSPHERE_PASS variable
#
# v2.1.1
# January 17, 2024
#-------------------------------------------------------------------------------
# * Fixed vSphere code to evaluate error conditions
#
# v2.1
# January 10, 2024
# ------------------------------------------------------------------------------
# * Added "-q" option to suppress lots of ssh output
# * Fixed test success message for vSphere mode
# * vSphere password is now converted from base64 encoding
#
# v2.0
# January 5, 2024
# ------------------------------------------------------------------------------
# * Improved logging
# * Added feature to support multiple powerman servers

PROGRAM=$(basename "$0")
VERSION="2.5"

# Configuration files
IPMI_CONFIG=${IPMI_CONFIG:-/etc/scoutfs/scoutfs-ipmi.conf}
IPMI_HOSTS=${IPMI_HOSTS:-/etc/scoutfs/scoutfs-ipmi-hosts.conf}

LOGGER="/bin/logger -p local3.crit -t scoutfs-fenced"

POWERMAN="/bin/pm"
NC="/bin/nc"
IPMITOOL="/bin/ipmitool"
CURL="/bin/curl"
JQ="/bin/jq"

POWERMAN_PORT="10101"
IPMITEST="false"
VERBOSE="false"

# Default settings if not set in scoutfs-ipmi.conf
IPMI_USER="admin"
IPMI_PASS="password"
IPMI_OPTS=""
IPMI_RETRIES="1"
STATUS_RETRIES="3"
STATUS_WAIT="2"
SSH_USER="root"
SSH_IDENTS=""
VSPHERE_USER=""
VSPHERE_PASS=""
CURL_TIMEOUT="3"

# Variables set by ScoutFS when fencing host
export IP="$SCOUTFS_FENCED_REQ_IP"
export RID="$SCOUTFS_FENCED_REQ_RID"

usage() {
    local program
    local status

    program=$(basename "$0")
    status="$1"

    echo "Usage: $program [-h|--help] [-C|--config file] [-H|--hosts file] [-d|--debug] [-v|--verbose] -t|--test | -i|--ip IP -r|--rid RID"

    [[ -n "$status" ]] && exit "$status"
}

echo_verbose() {
    if [[ "$VERBOSE" = "true" ]]
    then
        echo "$@"
    fi
}

echo_error() {
    $LOGGER "ERROR:" "$@"
}

echo_warn() {
    $LOGGER "WARNING:" "$@"
}

echo_fail() {
    $LOGGER "ERROR:" "$@"
    exit 1
}

echo_retry() {
    $LOGGER "ERROR:" "$@"
}

echo_log() {
    $LOGGER "INFO:" "$@"
}

echo_test_pass() {
    echo -e "PASS -" "$@"
}

echo_test_fail() {
    echo -e "FAIL -" "$@"
}

escape_regex() {
    #shellcheck disable=SC2001
    echo "$1" | sed 's/[][\.^$*+?(){}\\|]/\\&/g'
}

check_host_port() {
    local host
    local port

    host="$1"
    port="$2"

    [[ -z "$host" || -z "$port" ]] && return 1

    #shellcheck disable=SC2086
    if ! timeout 1 bash -c 'cat < /dev/null > "/dev/tcp/'${host}'/'${port}'"'
    then
        echo_error "(/dev/tcp) Host ${host}:${port} not available"
        return 1
    fi

    if ! "$NC" --wait 1 -z "$host" "$port"
    then
        echo_error "(nc) Host ${host}:${port} not available"
        return 1
    fi

    return 0
}

get_ipmi_host () {
    local host
    local ilom
    local mode
    local pm_server
    local pm_node
    local vm_server
    local vm_guest
    local ip

    ip="$1"

    mode=$(awk -v ip="$ip" '$1 == ip {print $2}' "$IPMI_HOSTS") || \
        echo_fail "lookup fence mode failed"

    case "$mode" in
        ipmitool)
            conf=$(awk -v ip="$ip" '$1 == ip {print $3}' "$IPMI_HOSTS") || \
                echo_fail "lookup fence host failed"
            host="ipmitool:${conf}"
            ;;
        powerman)
            conf=$(awk -v ip="$ip" '$1 == ip {print $3}' "$IPMI_HOSTS") || \
                echo_fail "lookup powerman configuration failed"
            host="powerman:${conf}"
            ;;
        vsphere)
            conf=$(awk -v ip="$ip" '$1 == ip {print $3}' "$IPMI_HOSTS") || \
                echo_fail "lookup vsphere configuration failed"
            host="vsphere:${conf}"
            ;;
        *)
            echo_fail "unknown fence mode"
            ;;
    esac

    echo "$host"
}

power_off_host() {
    local host
    local retry
    local output
    local ilom
    local pm_server
    local pm_node
    local vm_server
    local vm_guest
    local vm_session
    local vm_auth
    local vm_state
    local regex
    local mode

    host="$1"
    retry=1

    mode=$(echo "$host" | awk 'BEGIN { FS=":" } { print $1 }')

    case "$mode" in
        ipmitool)
            ilom=$(echo "$host" | awk 'BEGIN { FS=":" } { print $2 }')
            while [[ "$retry" -le "$STATUS_RETRIES" ]]
            do
              output=$($IPMITOOL_CMD -H "$ilom" chassis power off 2>&1) || \
                  echo_fail "ipmi power off $ilom failed"

              output=$($IPMITOOL_CMD -H "$ilom" chassis power status 2>&1) || \
                  echo_fail "ipmi power stat $ilom failed"

              if [[ ! "$output" = "Chassis Power is off" ]]; then
                  echo_retry "ipmi stat $ilom not off, retry $retry of $STATUS_RETRIES"
              fi

              sleep "$STATUS_WAIT"
              retry=$((retry + 1))
            done

            if [[ ! "$output" = "Chassis Power is off" ]]; then
              echo_fail "ipmi stat $ilom not off"
            fi
            ;;
        powerman)
            pm_server=$(echo "$host" | awk ' BEGIN { FS=":" } ; { print $2 } ')
            pm_node=$(echo "$host" | awk ' BEGIN { FS=":" } ; { print $3 } ')
            error=0

            IFS=',' read -r -a pm_servers <<< "$pm_server"
            for server in "${pm_servers[@]}"
            do
                echo_log "attempting to fence $pm_node from powerman server $server"

                if ! check_host_port "$server" "$POWERMAN_PORT"; then
                    echo_error "powerman server $server is not responding"
                    continue
                fi

                output=$($POWERMAN -h "$server" --off "$pm_node" 2>&1) || \
                    echo_error "powerman power off $pm_node failed from $server: $output"

                output=$($POWERMAN -h "$server" --query "$pm_node" 2>&1) || \
                    echo_error "powerman power stat $pm_node failed from $server: $output"
                output="${output//$'\012'/ }"
                echo_log "powerman stat output: $output"

                escape_pm_node=$(escape_regex "$pm_node")
                regex="off:\s+$escape_pm_node"
                if [[ ! "$output" =~ $regex ]]; then
                    echo_error "powerman stat $pm_node not off"
                    error=1
                else
                    error=0
                    break
                fi
            done
            [[ "$error" -eq 1 ]] && echo_fail "failed to power off $pm_node"
            echo_log "success fence power down $pm_node from powerman server $server"
            exit 0
            ;;
        vsphere)
            vm_server=$(echo "$host" | awk ' BEGIN { FS=":" } ; { print $2 } ')
            vm_guest=$(echo "$host" | awk ' BEGIN { FS=":" } ; { print $3 } ')
            vm_auth=$(echo -n "${VSPHERE_USER}:${VSPHERE_PASS}" | base64)
            vm_error=""
            vm_session=""

            if ! vm_json=$("$CURL" --connect-timeout "$CURL_TIMEOUT" -s --insecure --request POST --header "Content-Type: application/json" --header "Authorization: Basic ${vm_auth}" "https://${vm_server}/api/session"); then
                echo_fail "vsphere unable to authenticate to $vm_server"
            fi

            vm_error=$(echo "$vm_json" | "$JQ" -r '.error_type' 2> /dev/null)
            if [[ ! -z "$vm_error" && "$vm_error" != "null" ]]; then
                echo_fail "vsphere API error: $vm_error"
            fi

            vm_session=$(echo "$vm_json" | tr -d '"')
            if ! vm_json=$("$CURL" --connect-timeout "$CURL_TIMEOUT" -s --insecure --request POST --header "Content-Type: application/json" --header "vmware-api-session-id: $vm_session" "https://${vm_server}/api/vcenter/vm/${vm_guest}/power?action=stop"); then
                echo_fail "vsphere power off $vm_guest failed"
            fi

            vm_error=$(echo "$vm_json" | "$JQ" -r '.error_type' 2> /dev/null)
            if [[ ! -z "$vm_error" && "$vm_error" != "null" ]]; then
                echo_fail "vsphere poweroff API error: $vm_error"
            fi
            sleep 5

            if ! vm_json=$("$CURL" --connect-timeout "$CURL_TIMEOUT" -s --insecure --request GET --header "Content-Type: application/json" --header "vmware-api-session-id: $vm_session" "https://${vm_server}/api/vcenter/vm/${vm_guest}/power"); then
                echo_fail "vsphere state $vm_guest not off"
            fi

            vm_error=$(echo "$vm_json" | "$JQ" -r '.error_type' 2> /dev/null)
            if [[ ! -z "$vm_error" && "$vm_error" != "null" ]]; then
                echo_fail "vsphere state unknown: $vm_error"
            fi

            vm_state=$(echo "$vm_json" | "$JQ" -r '.state')
            if [[ -z "$vm_state" || "$vm_state" != "POWERED_OFF" ]]; then
                echo_fail "vsphere state $vm_guest not off"
            fi

            # terminate vSphere session
            if ! "$CURL" --connect-timeout "$CURL_TIMEOUT" -s --insecure --request DELETE --header "Authorization: Basic ${vm_auth}" --header "vmware-api-session-id: $vm_session" "https://${vm_server}/api/session"; then
                echo_test_fail "Failed to terminate vSphere API session for ${vm_guest}"
                errors=$((errors + 1))
            fi
            ;;
        *)
            echo_fail "unknown fence mode"
            ;;
    esac

    echo_log "fence power down $host success"

    exit 0
}

test_ipmi() {
    local ip
    local host
    local mode
    local pm_server
    local pm_node
    local vm_server
    local vm_guest
    local vm_session
    local vm_auth
    local vm_state
    local errors
    local skip_vsphere

    skip_vsphere=0
    errors=0
    echo_verbose "SSH_CMD = ${SSH_CMD}"
    # shellcheck disable=SC1001 disable=SC2013
    for ip in $(awk '!/^($|[[:space:]]*#)/ {print $1}' "$IPMI_HOSTS")
    do
        echo_verbose "Testing SSH connectivity to ${ip}"
        if ! $SSH_CMD "$ip" /bin/true; then
            echo_test_fail "SSH to $ip"
            errors=$((errors + 1))
        else
            echo_test_pass "SSH to $ip"
        fi

        host=$(get_ipmi_host "$ip")
        echo_verbose "get_ipmi_host returned: $host"
        if [ -z "$host" ]; then
            echo_test_fail "Unable to parse host from get_ipmi_host: $ip $host"
            errors=$((errors + 1))
        fi

        mode=$(echo "$host" | awk 'BEGIN { FS=":" } { print $1 }')
        echo_verbose "Detected mode: ${mode}"
        case "$mode" in
            ipmitool)
                ilom=$(echo "$host" | awk ' BEGIN { FS=":" } { print $2 } ')

                echo_verbose "Attempting to query ipmi power status from ${ilom}"

                echo_verbose "Running command: ${IPMITOOL_CMD} -H ${ilom} chassis power status"
                if ! $IPMITOOL_CMD -H "$ilom" chassis power status; then
                    echo_test_fail "IPMI power state for $ip"
                    errors=$((errors + 1))
                else
                    echo_test_pass "IPMI power state for $ip"
                fi
                ;;
            powerman)
                pm_server=$(echo "$host" | awk ' BEGIN { FS=":" } ; { print $2 } ')
                IFS=',' read -r -a pm_servers <<< "$pm_server"
                for server in "${pm_servers[@]}"
                do
                    pm_node=$(echo "$host" | awk ' BEGIN { FS=":" } ; { print $3 } ')

                    echo_verbose "Testing powerman power state for node $pm_node from server $server ($POWERMAN -h $server --query $pm_node)"

                    if ! check_host_port "$server" "$POWERMAN_PORT"; then
                        echo_test_fail "powerman server $server is not responding"
                        errors=$((errors + 1))
                        continue
                    fi

                    if ! $POWERMAN -h "$server" --query "$pm_node" > /dev/null 2>&1; then
                        echo_test_fail "powerman power state for $ip from $server"
                        errors=$((errors + 1))
                    else
                        echo_test_pass "powerman power state for $ip from $server"
                    fi
                done
                ;;
            vsphere)
                vm_server=$(echo "$host" | awk ' BEGIN { FS=":" } ; { print $2 } ')
                vm_guest=$(echo "$host" | awk ' BEGIN { FS=":" } ; { print $3 } ')
                vm_auth=$(echo -n "${VSPHERE_USER}:${VSPHERE_PASS}" | base64)
                vm_error=""
                vm_session=""

                if [[ "$skip_vsphere" -eq 1 ]]
                then
                    echo_warn "Skipping further vSphere attempts after failed authentication"
                    continue
                fi

                echo_verbose "vSphere server identified as: ${vm_server}"
                echo_verbose "vSphere guest (VMID) identified as: ${vm_guest}"
                echo_verbose "vSphere auth identified as: ${vm_auth}"

                echo_verbose "Running command: ${CURL} --connect-timeout $CURL_TIMEOUT -s --insecure --request POST --header \"Content-Type: application/json\" --header \"Authorization: Basic ${vm_auth}\" https://${vm_server}/api/session"
                if ! vm_json=$("$CURL" --connect-timeout "$CURL_TIMEOUT" -s --insecure --request POST --header "Content-Type: application/json" --header "Authorization: Basic $vm_auth" "https://${vm_server}/api/session"); then
                    echo_test_fail "Failed to get vSphere API session from $vm_server"
                    errors=$((errors + 1))
                    continue
                fi

                vm_error=$(echo "$vm_json" | "$JQ" -r '.error_type' 2> /dev/null)
                if [[ ! -z "$vm_error" && "$vm_error" != "null" ]]; then
                    if [[ "$vm_error" = "UNAUTHENTICATED" ]]
                    then
                        skip_vsphere=1
                    fi
                    echo_test_fail "vSphere API failure: $vm_error"
                    errors=$((errors + 1))
                    continue
                fi

                vm_session=$(echo "$vm_json" | tr -d '"')
                if ! vm_json=$("$CURL" --connect-timeout "$CURL_TIMEOUT" -s --insecure --request GET --header "vmware-api-session-id: $vm_session" "https://${vm_server}/api/vcenter/vm/${vm_guest}/power"); then
                    echo_test_fail "Failed to get vSphere API power status for $vm_guest"
                    errors=$((errors + 1))
                else
                    vm_error=$(echo "$vm_json" | "$JQ" -r '.error_type' 2> /dev/null)
                    if [[ ! -z "$vm_error" && "$vm_error" != "null" ]]; then
                        echo_test_fail "Failed to get power state: $vm_error"
                        errors=$((errors + 1))
                        continue
                    fi

                    vm_state=$(echo "$vm_json" | "$JQ" -r '.state')
                    if [[ -z "$vm_state" ]]
                    then
                        echo_test_fail "Failed to get power status for $vm_guest"
                        error=$((errors+1))
                    else
                        echo_test_pass "Success vSphere power state $vm_state for $vm_guest from $vm_server"
                    fi
                fi

                # Terminate vSphere session
                if ! "$CURL" --connect-timeout "$CURL_TIMEOUT" -s --insecure --request DELETE --header "Authorization: Basic ${vm_auth}" --header "vmware-api-session-id: $vm_session" "https://${vm_server}/api/session"; then
                    echo_test_fail "Failed to terminate vSphere API session for $vm_guest"
                    errors=$((errors + 1))
                fi
                ;;
            *)
                echo_test_fail "An unknown fence mode was detected: ${mode}"

                break
                ;;
        esac
    done

    return "$errors"
}

# Setup environment and commands
test -r "$IPMI_CONFIG" || \
    echo_fail "$IPMI_CONFIG isn't readable file"
test -r "$IPMI_HOSTS" || \
    echo_fail "$IPMI_HOSTS isn't readable file"
test -x "$IPMITOOL" || \
    echo_fail "$IPMITOOL not found, need to install ipmitool?"
test -x "$CURL" || \
    echo_fail "$CURL not found, need to install curl?"
test -x "$JQ" || \
    echo_fail "$JQ not found, need to install jq?"

if [ -f "$IPMI_CONFIG" ]; then
  source "$IPMI_CONFIG"
else
  echo "The file ${IPMI_CONFIG} does not exist."
  exit 1
fi

# Convert vSphere password from base64 encoding
if [[ ! -z "$VSPHERE_PASS" ]]
then
    VSPHERE_PASS=$(echo "$VSPHERE_PASS" | base64 --decode 2> /dev/null)
    if [[ -z "$VSPHERE_PASS" ]]
    then
        echo "ERROR: verify that vSphere password is base64 encoded"
        exit 1
    fi
fi

SSH_CMD="ssh -o ConnectTimeout=3 -o BatchMode=yes -o StrictHostKeyChecking=no -q -l $SSH_USER $SSH_IDENTS"

# Get the IPMI password. If IPMI_PASS is a file, then read the file
# otherwise assume the value is the actual password.
if [ -n "$IPMI_PASS" ]
then
    if [ -r "$IPMI_PASS" ]
    then
        IPMITOOL_CMD="$IPMITOOL -R $IPMI_RETRIES -I lanplus $IPMI_OPTS -U $IPMI_USER -f $IPMI_PASS"
    else
        IPMITOOL_CMD="$IPMITOOL -R 1 -I lanplus $IPMI_OPTS -U $IPMI_USER -P $IPMI_PASS"
    fi
fi

# Get the vSphere password. If VSPHERE_PASS is a file, then read the file
# otherwise assume the value is the actual password.
if [ -n "$VSPHERE_PASS" ]
then
    if [ -r "$VSPHERE_PASS" ]
    then
        VSPHERE_PASS=$(cat "$VSPHERE_PASS")
    fi
fi

while :; do
    case "$1" in
        -h|--help)
            usage 0
            shift
            ;;
        -d|--debug)
            set -x
            shift
            ;;
        -v|--verbose)
            VERBOSE="true"
            shift
            ;;
        -t|--test)
            IPMITEST="true"
            shift
            ;;
        -H|--hosts)
            IPMI_HOSTS="$2"
            shift
            shift
            ;;
        -C|--config)
            IPMI_CONFIG="$2"
            shift
            shift
            ;;
        -i|--ip)
            SCOUTFS_FENCED_REQ_IP="$2"
            IP="$2"
            shift
            shift
            ;;
        -r|--rid)
            SCOUTFS_FENCED_REQ_RID="$2"
            RID="$2"
            shift
            shift
            ;;
        -V|--version)
            echo "$PROGRAM $VERSION"
            exit 0
            ;;
        *)
            break
            ;;
    esac
done

echo_log "fence script invoked: IP: $SCOUTFS_FENCED_REQ_IP RID: $SCOUTFS_FENCED_REQ_RID TEST: $IPMITEST"

#
# Script executed in test mode. Run tests and exit.
#
if [ "$IPMITEST" = "true" ]; then
    if ! test_ipmi; then
        exit 1
    fi
    exit 0
fi

#
# Script executed in fence mode. Fence requested host and exit.
#
if [ -z "$IP" ]; then
    echo_fail "no IP given for fencing"
fi

HOST=$(get_ipmi_host "$IP")
if [ -z "$HOST" ]; then
    echo_fail "no IPMI host found for fence IP $IP"
fi

# first check via ssh if the mount still exists
# if ssh succeeds, we will only power down the node if mounted
if ! OUTPUT=$($SSH_CMD "$IP" "echo BEGIN; LC_ALL=C egrep -m 1 '(^0x*|^$RID$)' /sys/kernel/boot_params/version /sys/fs/scoutfs/f*r*/rid; echo END"); then
    # ssh not working, just power down host
    power_off_host "$HOST"
fi

if [[ ! "$OUTPUT" =~ BEGIN ]]; then
    # ssh failure
    echo_log "no BEGIN"
    power_off_host "$HOST"
fi

# shellcheck disable=SC1001 disable=SC2013
if [[ ! "$OUTPUT" =~ \/boot_params\/ ]]; then
    # ssh failure
    echo_log "no boot params"
    power_off_host "$HOST"
fi

if [[ ! "$OUTPUT" =~ END ]]; then
    # ssh failure
    echo_log "no END"
    power_off_host "$HOST"
fi

REGEX="rid:$RID"
if [[ "$OUTPUT" =~ $REGEX ]]; then
    # rid still mounted, power down
    echo_log "rid $RID still mounted"
    power_off_host "$HOST"
fi

echo_log "fence host $IP/$HOST success (rid $RID not mounted)"
exit 0
